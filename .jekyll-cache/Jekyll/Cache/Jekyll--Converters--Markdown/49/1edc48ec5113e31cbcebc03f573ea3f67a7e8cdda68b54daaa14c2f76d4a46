I"c<h1 class="no_toc" id="summary">Summary</h1>

<ul id="markdown-toc">
  <li><a href="#using-library-files-to-aid-in-execution" id="markdown-toc-using-library-files-to-aid-in-execution">Using Library Files To Aid In Execution</a></li>
  <li><a href="#remote-capability-of-library-files" id="markdown-toc-remote-capability-of-library-files">Remote Capability of Library Files</a></li>
</ul>

<h1 id="using-library-files-to-aid-in-execution">Using Library Files To Aid In Execution</h1>

<p>Library files were introduce in Windows 7 and are a way of viewing the contents of multpile directories in a single view. For example the ‚ÄúPictures‚Äù library actually includes the locations C:\Users\User\Pictures and C:\Users\Public\Pictures. The way Microsoft implements this is by creating .library-ms files at a location inside of AppData. The library-ms files are XML and follow a schema. Most of Microsofts .-ms file types are XML. The schema is easily found online, the description of the elements, however, is fairly vague. Below is an example of a typical library-ms file.</p>

<p><img src="/assets/img/posts/Windows-Library-Files/image2011.png" alt="1" class="imghalf" /></p>

<p>This example only has one location, but the specification says we can have as many as we want. All the libraries Microsoft provides have specific owners with serialized locations. Meaning you can‚Äôt move it from machine to machine or even user for user. However, all the elements that tie it to a certain machine/user/location, are optional. The parts we‚Äôre interested in are the SearchConenectionDescription.</p>

<p><br />
<img src="/assets/img/posts/Windows-Library-Files/image2012.png" alt="1" class="imghalf" />
<br />
								And the template Info element.
<br />
<img src="/assets/img/posts/Windows-Library-Files/image2013.png" alt="1" class="imghalf" />
<br /></p>

<p>The SearchConnectionDescription allows you to choose what paths should be included when conglomerting the files in the library view. In this section we‚Äôll just cover the local capabilities of the library files. So, this is useful in many cases. In aiding execution, you can modify the url element of the search connector description path. Pointing the path to a non-existent sub-folder of a junction folder will cause the rendering of the junction folder. This is useful in triggering execution on a link file. This also causes exececution of COM objects (see the article <a href="/articles/CLSIDs-and-Junction-Folders/" title="CLSIDs and Junction Folders">CLSIDs and Junction Folders</a>).</p>

<p>The templateInfo section allows the user to choose the view explorer will give to the folders/files. In cases where you are using icon rendering (like desktop.ini files), you can change the explorer view from details to icon view.</p>

<p>As a tradecraft aspect, you can choose to give the library an icon (folder icon, Recycle Bin icon, etc) by changing the {iconReference} element.</p>

<h1 id="remote-capability-of-library-files">Remote Capability of Library Files</h1>

<p>To understand this capability you might want to read the section on the SearchConnectorDescription. So the remote capabiliity has not yet been tested but is seen to have potential for fingerprinting and attacking machines remotely. The url portion of the SearchConnectorDescription can point at things other than files/folder/known folders (CLSIDs). In fact, the url can be an actual URL or a UNC path. This means that when the library file is rendered (could be placed on removable media or a network share), svchost attempts to find the folder using WebDAV at the network/internet location. I have not proofed out the capability to remotely exploit the machine. However, at a minimum, the OS and IP information is sent with the request to the listening post. The potential here is to use the junction point method on the WebDav server to cause remote execution when the library file is rendered.</p>
:ET